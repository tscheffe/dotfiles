---

Layout/ClassStructure:
  Description: 'Enforces a configured order of definitions within a class body.'
  StyleGuide: 'https://github.com/rubocop-hq/ruby-style-guide#consistent-classes'
  Enabled: false

Layout/MultilineAssignmentLayout:
  Description: 'Check for a newline after the assignment operator in multi-line assignments.'
  StyleGuide: '#indent-conditional-assignment'
  Enabled: false

Lint/IneffectiveAccessModifier:
  Description: >-
                 Checks for attempts to use `private` or `protected` to set
                 the visibility of a class method, which does not work.
  Enabled: false

Lint/NumberConversion:
  Description: 'Checks unsafe usage of number conversion methods.'
  Enabled: false

# Enabled by default, but we use `private` for more than syntactic significance and this got in the way of that.
# TODO: See if recent changes mean we can re-enable this for our scenario
Lint/UselessAccessModifier:
  Description: 'Checks for useless access modifiers.'
  Enabled: false
  ContextCreatingMethods: []
  MethodCreatingMethods: []

Style/Copyright:
  Description: 'Include a copyright notice in each file before any code.'
  Enabled: false

# Enabled by default
Style/Documentation:
  Description: 'Document classes and non-namespace modules.'
  Enabled: false

Style/DocumentationMethod:
  Description: 'Public methods.'
  Enabled: false
  Exclude:
    - 'spec/**/*'
    - 'test/**/*'

Style/ImplicitRuntimeError:
  Description: >-
                 Use `raise` or `fail` with an explicit exception class and
                 message, rather than just a message.
  Enabled: false

Style/InlineComment:
  Description: 'Avoid trailing inline comments.'
  Enabled: false

Style/IpAddresses:
  Description: "Don't include literal IP addresses in code."
  Enabled: false

Style/MethodCallWithArgsParentheses:
  Description: 'Use parentheses for method calls with arguments.'
  StyleGuide: '#method-invocation-parens'
  Enabled: false

# Enabled by default, but it's confusing and the autocorrect is surprising. This
# also makes the "is it null" concern implicit, when it should be explicit
Style/SafeNavigation:
  Description: >-
                  This cop transforms usages of a method call safeguarded by
                  a check for the existance of the object to
                  safe navigation (`&.`).
  Enabled: false

# Enabled by default, but we shouldn't enforce names; leave it up to the user
Style/SingleLineBlockParams:
  Description: 'Enforces the names of some block params.'
  Enabled: false

Style/StringHashKeys:
  Description: 'Prefer symbols instead of strings as hash keys.'
  StyleGuide: '#symbols-as-keys'
  Enabled: false

# Enabled by default, but it messes with stuff
Style/TrailingUnderscoreVariable:
  Description: >-
                 Checks for the usage of unneeded trailing underscores at the
                 end of parallel variable assignment.
  Enabled: false

# Too rails specific
Rails/Delegate:
  Description: 'Prefer delegate method for delegations.'
  Enabled: false

# We actually do `exit` a bunch with scripts
Rails/Exit:
  Description: >-
                  Favor `fail`, `break`, `return`, etc. over `exit` in
                  application or library code outside of Rake files to avoid
                  exits during unit testing or running in production.
  Enabled: false


# Enabled by default but doesn't work with our rack-test
Rails/HttpPositionalArguments:
  Description: 'Use keyword arguments instead of positional arguments in http method calls.'
  Enabled: false
  Include:
    - 'spec/**/*'
    - 'test/**/*'

# Enabled by default, but super chatty and it's not useful with activesupport
Rails/TimeZone:
  Description: 'Checks the correct usage of time zone aware methods.'
  StyleGuide: 'https://github.com/rubocop-hq/rails-style-guide#time'
  Reference: 'http://danilenko.org/2012/7/6/rails_timezones'
  Enabled: false

# Enabled by default but the semantics between `tr` and `gsub` are different, we don't want to
# optimize for speed over understanding.
Performance/StringReplacement:
  Description: >-
                  Use `tr` instead of `gsub` when you are replacing the same
                  number of characters. Use `delete` instead of `gsub` when
                  you are deleting characters.
  Reference: 'https://github.com/JuanitoFatas/fast-ruby#stringgsub-vs-stringtr-code'
  Enabled: false
