#!/usr/bin/env ruby
# vim: ft=ruby

require 'tty-command'
require 'optimist'
require 'pathname'
require 'fileutils'

require File.join(__dir__, '..', 'ruby', 'lib', 'images_helper')

# Test cases
# - (Base case) Run in dir we want to optimize, without parameter, it optimizes that dir
# - With passed directory that exists, it optimizes that dir
# - With passed directory that does not exist it errors out
# - With more than one argument (excluding --test), it fails and prints help

# Parameter Test Cases
# - no parameters - Optimizes current directory
# - one parameter, --test - Shows what it would optimize in current directory
# - any paramters, invalid dir - Fails complaining about invalid directory
# - one parameter, dir
# - more than one parameter, with test - Shows what it would optimize in passed directory
# - more than one parameter, excluding test - Fails, explaining more than one argument passed

# TODO: enable running both lossy and lossless

module OptimizeJpegsInFolder

  SOURCE_DIR = '_source'.freeze

  OPTIMIZED_SUFFIX_LOSSLESS = '-optimized-lossless'.freeze
  OPTIMIZED_SUFFIX_LOSSY = '-optimized-lossy'.freeze

  def self.perform(args:)
    options = Optimist::options(args) do
      banner <<~BANNERDOC
      Optimizes JPEG files, either lossless or lossy, in a given folder

      Usage:
        #{File.basename(__FILE__)} [options]

      where [options] are:
      BANNERDOC

      opt :test, 'Run in test mode, reporting which images will be converted without doing it', short: :none
      opt :lossless, 'Optimizes JPEG files with jpegtran for lossless optimization', short: :none
      opt :lossy, 'Optimizes JPEG files with cjpeg for lossy optimization', short: :none
      opt :directory, 'Which directory to parse', short: :none, default: Dir.pwd
    end

    if !Dir.exist?(options[:directory])
      Optimist::die(:directory, "'#{options[:directory]}' does not exist")
    end

    if options[:lossless] && options[:lossy]
      Optimist::die('Both --lossless or --lossy specified, this is not supported yet')
    end

    if !options[:lossless] && !options[:lossy]
      Optimist::die('Neither --lossless or --lossy specified, one of those is required')
    end

    @test_run = options[:test]

    ensure_tools_exist!

    FileUtils.mkdir_p(SOURCE_DIR) if !@test_run

    jpeg_images = ImagesHelper.all_jpeg_images_in_dir(options[:directory])

    jpeg_images.each do |input_img|
      if options[:lossless]
        optimize_lossless(image: input_img)
      elsif options[:lossy]
        optimize_lossy(image: input_img)
      else
        warn 'Neither --lossless or --lossy specified, one of those is required.'
        Optimize::educate
      end
    end
  end

  private

  def self.optimize_lossless(image:)
    output_img = File.basename(image, '.*') + OPTIMIZED_SUFFIX_LOSSLESS + File.extname(image)

    puts "Lossless Optimizing #{image} to #{output_img}"

    if File.exist?(output_img)
      puts "Removing existing optimized image: '#{output_img}'"
      FileUtils.rm(output_img)
    end

    return if @test_run

    cmd = TTY::Command.new
    stdout, stderr = cmd.run("jpegtran -copy none -optimize -perfect -outfile \"#{output_img}\" \"#{image}\"")

    puts "STDOUT: #{stdout}" if stdout.present?
    puts "STDERR: #{stderr}" if stderr.present?

    FileUtils.mv(image, SOURCE_DIR) if File.exist?(output_img)
  end
  private_class_method :optimize_lossless

  def self.optimize_lossy(image:)
    output_img = File.basename(image, '.*') + OPTIMIZED_SUFFIX_LOSSY + File.extname(image)

    puts "Lossy Optimizing #{image} to #{output_img}"

    if File.exist?(output_img)
      puts "Removing existing optimized image: '#{output_img}'"
      FileUtils.rm(output_img)
    end

    return if @test_run

    cmd = TTY::Command.new
    stdout, stderr = cmd.run("cjpeg -optimize -quality 75 -outfile \"#{output_img}\" \"#{image}\"")

    puts "STDOUT: #{stdout}" if stdout.present?
    puts "STDERR: #{stderr}" if stderr.present?

    FileUtils.mv(image, SOURCE_DIR) if File.exist?(output_img)
  end
  private_class_method :optimize_lossy

  def self.ensure_tools_exist!
    result = TTY::Command.new(printer: :null).run!('which jpegtran')
    if !result.success?
      warn 'jpegtran (from mozjpeg) installation required. Unable to find in path via "which jpegtran"'
      warn "which exited with code #{result.exit_status}"
      warn "stdout:\n #{result.stdout}" if result.stdout.present?
      warn "stderr:\n #{result.stderr}" if result.stderr.present?
      exit 1
    end

    result = TTY::Command.new(printer: :null).run!('which cjpeg')
    if !result.success?
      warn 'cjpeg (from mozjpeg) installation required. Unable to find in path via "which cjpeg"'
      warn "which exited with code #{result.exit_status}"
      warn "stdout:\n #{result.stdout}" if result.stdout.present?
      warn "stderr:\n #{result.stderr}" if result.stderr.present?
      exit 1
    end
  end
  private_class_method :ensure_tools_exist!

end

OptimizeJpegsInFolder.perform(args: ARGV)
