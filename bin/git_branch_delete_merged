#!/usr/bin/env ruby
# vim: ft=ruby

# Delete branchs which have already been merged into origin/HEAD
#   Source: http://stevenharman.net/git-clean-delete-already-merged-branches
#   Another Source: with a ton of info:
#     http://stackoverflow.com/questions/13064613/how-to-prune-local-tracking-branches-that-do-not-exist-on-remote-anymore


# Snazzy alternative way to delete branches, though probably outdated:
#   git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -d


# TODO: Local `run-duration` branch created, tracking origin/run-duration, when I pull
#   down master and the origin/run-duration branch has been deleted then local run-duration
#   should get deleted, but it doesn't

# NOTE: My origin/HEAD was pointing to master, but that isn't correct. Changed it to origin/develop
#   and it _still_ didn't delete the branch. `git branch --merged origin/develop` doesn't show
#   the branch. We might have to do the "check each commit in a branch and see if it's in master" approach

# NOTE: I do get this, which interestingly makes the run-duration color blue in my prompt:
  # 22 [/c/dev/gitlab/HealthInspector/health-inspector](master) >>> gco run-duration
  # Switched to branch 'run-duration'
  # Your branch is based on 'origin/run-duration', but the upstream is gone.
  #   (use "git branch --unset-upstream" to fixup)

# NOTE: From master:
  # d501e9b - Merge branch 'run-duration' into 'develop'          4 days ago Daniel Ivy
  # cfe59d0 - Adding run duration to detail page                  4 days ago Dan Ivy
  # b117de3 - Merge branch 'backend-filters' into 'develop'       4 days ago Daniel Ivy

  # From run-duration:
  # 31 [/c/dev/gitlab/HealthInspector/health-inspector](run-duration) >>> glg
  #  8b55a5b - Adding run duration to detail page                  4 days ago Dan Ivy
  #        HEAD -> run-duration
  #  b117de3 - Merge branch 'backend-filters' into 'develop'       4 days ago Daniel Ivy

# Evidence:

# 5 [/c/dev/gitlab/HealthInspector/health-inspector](run-duration) >>> gcoa
# 6 [/c/dev/gitlab/HealthInspector/health-inspector](run-duration) >>> gcom
# Switched to branch 'master'
# Your branch is up to date with 'origin/master'.
# 7 [/c/dev/gitlab/HealthInspector/health-inspector](master) >>> gp
# From git.echo.com:HealthInspector/health-inspector
#  - [deleted]         (none)     -> origin/dto-consistency
#  - [deleted]         (none)     -> origin/react-bug-fix
#  - [deleted]         (none)     -> origin/run-duration
#  - [deleted]         (none)     -> origin/time-frame
# remote: Counting objects: 70, done.
# remote: Compressing objects: 100% (61/61), done.
# remote: Total 70 (delta 29), reused 32 (delta 9)
# Unpacking objects: 100% (70/70), done.
#    b117de3..759d0da  develop             -> origin/develop
#  * [new branch]      end-time-bug-fix    -> origin/end-time-bug-fix
#  * [new branch]      filter-construction -> origin/filter-construction
# Current branch master is up to date.
# 8 [/c/dev/gitlab/HealthInspector/health-inspector](master) >>> gbd-m
# Pruning with 'git remote prune origin'
# 9 [/c/dev/gitlab/HealthInspector/health-inspector](master) >>> gba
#   develop
# * master
#   run-duration
#   remotes/origin/HEAD -> origin/master
#   remotes/origin/develop
#   remotes/origin/end-time-bug-fix
#   remotes/origin/filter-construction
#   remotes/origin/master
#   remotes/origin/validators


module Helpers
  def self.out(cmd:)
    `#{cmd}`
  end

  def self.out!(cmd:)
    cmd_out = out(cmd: cmd)

    if $? != 0
      raise "!!! Command '#{cmd}' failed with out: #{cmd_out}"
    end

    cmd_out
  end

  def self.split_lines(stdout:)
    stdout
      .split("\n")
      .map(&:strip)
  end

  def self.git_trimmed_origin_head
    symbolic_ref_out = out!(cmd: 'git symbolic-ref refs/remotes/origin/HEAD')

    symbolic_ref_out.strip.sub(%r{refs/remotes/origin/}, '')
  end
end

module GitBranchDeleteMerged
  PROTECTED_BRANCH_MATCHERS = ['master\z', 'develop\z', 'HEAD', '->']

  def self.parsed_options(args:)
    opts = {
      delete_remote: false,
      dry_run: false
    }

    while args.length > 0
      arg = args.shift
      case arg
      when "--remote"
        opts[:delete_remote] = true
      when "--dry"
        opts[:dry_run] = true
      else
        raise "Invalid argument #{arg}"
      end
    end

    opts
  end

  def self.perform(options:)
    # Alternative strategies for "determine merged branches" include:
    #   `git cherry #{upstream} #{head}` for (better than git-diff) commitwise-diff
    #   `git diff origin/master...HEAD` for filewise-diff
    #   `git branch -vv | git branch -vv | grep 'origin/.*: gone]' | awk '{print $1}'`
    #      source: https://github.com/denysdovhan/dotfiles/blob/master/bin/git-cleanup#L24

    branches_stdout =
      if options[:delete_remote]
        # '--remotes' lists only "remote-tracking branches", '--all' doesn't work because
        #   it includes local branches which are unpushed, even if they're unmerged
        Helpers.out!(cmd: "git branch --remotes --merged #{Helpers.git_trimmed_origin_head}")
      else
        # TODO: Figure out how to reject local branches which are simply "unpushed", not "merged"
        Helpers.out!(cmd: "git branch --merged #{Helpers.git_trimmed_origin_head}")
      end

    origin_deleted_out =
      Helpers.out!(cmd: "git branch -vv | grep 'origin/.*: gone]' | awk '{ print $1}'")
    branches_where_origin_deleted =
      Helpers.split_lines(stdout: origin_deleted_out)

    array_of_branches = Helpers.split_lines(stdout: branches_stdout)

    potential_branches =
      if options[:delete_remote]
        array_of_branches
      else
        (array_of_branches + branches_where_origin_deleted)
      end

    branches_to_delete = potential_branches
      .reject { |b| b.match(/#{PROTECTED_BRANCH_MATCHERS.join('|')}/) }
      .uniq

    if options[:delete_remote]
      branches_to_delete = branches_to_delete.map { |b| b.sub('origin/', '') }
    end

    # TODO: Capture stderr and stdout then output it
    branches_to_delete.each do |branch|
      if options[:delete_remote]
        puts "-- Deleting branch on origin: #{branch}"
        Helpers.out!(cmd: "git push origin --delete #{branch}") unless options[:dry_run]
      else
        puts "-- Deleting branch locally: #{branch}"
        Helpers.out!(cmd: "git branch --delete #{branch}") unless options[:dry_run]
        # git branch --delete --remotes "$branch"
      end
    end

    puts "Pruning with 'git remote prune origin'"
    unless options[:dry_run]
      # Equivalent to: rm .git/refs/remotes/origin/$branch right?
      prune_out = Helpers.out!(cmd: 'git remote prune origin')
      if prune_out != nil && !prune_out.strip.empty?
        puts prune_out
      end
    end
  end
end

opts = GitBranchDeleteMerged.parsed_options(args: ARGV)
GitBranchDeleteMerged.perform(options: opts)
