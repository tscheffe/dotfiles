#!/usr/bin/env ruby
# vim: ft=ruby

require 'bigdecimal'
require 'active_support/duration'

module CutBlack

  MATCHER = /^\[blackdetect @ \w+?\] black_start:(?<black_start>.+?) black_end:(?<black_end>.+?) black_duration:(?<black_duration>.+?)$/

  FFMPEG_EXE = 'C:/tools/ffmpeg-3.2.4-win64-static/bin/ffmpeg.exe'.freeze

  def self.perform(args:)
    if args[0] == '--help'
      command_name = File.basename(__FILE__)
      puts <<~HELPDOC
        USAGE:
            #{command_name} <video_file_path> [black_duration]
                Description: Cuts video at 'video_file_path' at each segment with a
                             length of at least 'black_duration' seconds
                video_file_path: Path to video to cut
                black_duration: Duration of black screen, in seconds, to mark transitions
            #{command_name} --help
                Prints this message
      HELPDOC
      exit 0
    end

    video_filename = args[0]

    raise 'Must provide video filename' if video_filename.nil?

    raise "Can't find ffmpeg at #{FFMPEG_EXE}" unless File.exist?(FFMPEG_EXE)

    raise "Invalid video file: #{video_filename}" unless File.exist?(video_filename)

    # minimum detected black duration expressed in seconds
    black_duration = args[1]
    black_duration = '0.75' if black_duration.blank?

    # Ratio for considering a picture black, black_pixels divided by non_black_pixels
    picture_black_ratio_th = '0.85'

    # Maximum pixel luminance value for which a pixel is considered "black"
    pixel_black_th = '0.15'

    ffmpeg_stdout = `"#{FFMPEG_EXE}" -i "#{video_filename}" -vf blackdetect=black_min_duration=#{black_duration}:picture_black_ratio_th=#{picture_black_ratio_th}:pixel_black_th=#{pixel_black_th} -an -f null - 2>&1 | tee detect_black_log.txt`
    status = $?
    unless status.exitstatus.zero?
      puts 'Shit broke:'
      puts ffmpeg_stdout
      raise "Failed with status: #{status}"
    end

    # puts "STDOUT FROM 'detect_black':"
    # puts ffmpeg_stdout

    video_basename = File.basename(video_filename, '.*')
    video_extension = File.extname(video_filename)
    video_dir = File.dirname(video_filename)
    output_file = File.join(video_dir, "#{video_basename}_%03d#{video_extension}")
    puts output_file
    # logfile = "#{video_basename}_ffmpeg.log"

    # cutpoints_filename = "detect_black_log.txt"
    # lines = File.open(cutpoints_filename) { |f| f.read }
    lines = ffmpeg_stdout.encode(universal_newline: true).lines

    matches = lines.map { |line|
      match = MATCHER.match(line)

      next if match.nil?

      puts "Matched: #{line}"
      {
        black_start:    BigDecimal(match[:black_start]),
        black_end:      BigDecimal(match[:black_end]),
        black_duration: BigDecimal(match[:black_duration])
      }
    }.compact

    puts "Found #{matches.length} matches"

    # matches.each do |match|
    #   puts match[:black_start].to_f
    # end

    cuts = matches.map do |match|
      cut_seconds = match[:black_start] + match[:black_duration] / 2
      puts format('cut_seconds: %<seconds>f', seconds: cut_seconds.to_f)
      cut_time = Time.at(match[:black_start] + match[:black_duration] / 2)
      cut_time_formatted = cut_time.utc.strftime('%H:%M:%S.%L')
      puts format(
        'Regular: %<cut_time>s, Formatted: %<cut_time_formatted>s',
        cut_time:           cut_time,
        cut_time_formatted: cut_time_formatted)

      cut_time_formatted
    end

    puts cuts.join(',')

    `#{FFMPEG_EXE} -i "#{video_filename}" -f segment -reset_timestamps 1 -segment_times #{cuts.join(',')} -c copy -map 0 "#{output_file}"`
  end

end

CutBlack.perform(args: ARGV)
