#!/usr/bin/env ruby
# vim: ft=ruby

# Bugs:

# >>> prefix_file_with_date work-notes/scheduling.md
# C:/tools/ruby/Ruby26-x64/lib/ruby/2.6.0/fileutils.rb:529:in `rename': No such file or directory @ rb_file_s_rename - (work-notes/scheduling.md, 2020-06-23_work-notes/scheduling.md) (Errno::ENOENT)
#         from C:/tools/ruby/Ruby26-x64/lib/ruby/2.6.0/fileutils.rb:529:in `block in mv'
#         from C:/tools/ruby/Ruby26-x64/lib/ruby/2.6.0/fileutils.rb:1557:in `block in fu_each_src_dest'
#         from C:/tools/ruby/Ruby26-x64/lib/ruby/2.6.0/fileutils.rb:1573:in `fu_each_src_dest0'
#         from C:/tools/ruby/Ruby26-x64/lib/ruby/2.6.0/fileutils.rb:1555:in `fu_each_src_dest'
#         from C:/tools/ruby/Ruby26-x64/lib/ruby/2.6.0/fileutils.rb:520:in `mv'
#         from C:/Users/Trent/.dotfiles/bin/prefix_file_with_date:28:in `perform'
#         from C:/Users/Trent/.dotfiles/bin/prefix_file_with_date:40:in `<main>'
# Prefixing file: 'work-notes/scheduling.md'
# Renaming 'work-notes/scheduling.md' => '2020-06-23_work-notes/scheduling.md'

require 'fileutils'

module StripPrefixFromDirs

  def self.perform(argv:)
    file = argv[0]

    if file.nil?
      warn 'Must specify a file to prefix'
      exit 1
    end

    if !File.exist?(file)
      warn "Provided file #{file} does not exist"
    end

    puts "Prefixing file: '#{file}'"

    sanitized_name = sanitize_file_name(file: file)

    file_mtime = File.mtime(file).strftime('%Y-%m-%d')
    prefixed_file_name = [file_mtime, file].join('_')

    puts "Renaming '#{file}' => '#{prefixed_file_name}'"
    FileUtils.mv(file, prefixed_file_name)
  end

  def self.sanitize_file_name(file:)
    # replace space with hyphen
    # lowercase everything

  end
  private_class_method :sanitize_file_name

end

StripPrefixFromDirs.perform(argv: ARGV)
