#!/usr/bin/env ruby
# vim: ft=ruby

require 'fileutils'

require File.join(__dir__, '..', 'ruby', 'lib', 'images_helper')

module GsubDirNames

  def self.perform(argv:)
    match = argv[0]
    substitution = argv[1]

    if match.blank? || substitution.blank?
      warn 'Must supply a match and a substitution'
      exit 1
    end

    puts "Replacing match: '#{match}' with substitution: '#{substitution}'"

    current_directory = File.absolute_path('.')

    puts "Matching entries in directory: #{current_directory}"

    # Dir.glob has interesting behavior with `[` characters where it behaves like a
    # regex, but we want literal match behavior. Just use Dir::entries and then filter
    to_rename = Dir.entries(current_directory)
      .select { |dir| Dir.exist?(dir) }

    if to_rename.any? { |dir| dir.include?(match) }
      puts 'Renaming:'
      to_rename.each do |source|
        dest = source.gsub(match, substitution).strip

        if source != dest
          puts "  #{source} => #{dest}"
          FileUtils.mv(source, dest)
        end
      end
    else
      puts 'No matching directories found'
    end
  end

end

GsubDirNames.perform(argv: ARGV)
