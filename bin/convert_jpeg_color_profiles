#!/usr/bin/env ruby
# vim: ft=ruby

require 'tty-command'
require 'optimist'
require 'pathname'
require 'fileutils'

require File.join(__dir__, '..', 'ruby', 'lib', 'images_helper')

# Test cases

module ConvertJpegColorProfiles

  SOURCE_DIR = '_source'.freeze

  COLORED_SUFFIX = '-colored'.freeze

  COLOR_PROFILE_PATH = File.absolute_path(File.join(__dir__, 'lib', 'sRGB2014.icc'))

  def self.perform(args:)
    STDOUT.sync = true

    options = Optimist.options(args) do
      banner <<~BANNERDOC
        Converts jpeg images to default ICC sRGB in a given folder
          Usage:
            #{File.basename(__FILE__)} [options]
          where [options] are:
      BANNERDOC

      opt :test, 'Run in test mode, reporting which images will be converted without doing it', short: :none
      opt :directory, 'Which directory to convert images in', short: :none, default: Dir.pwd
    end

    if !Dir.exist?(options[:directory])
      Optimist.die(:directory, "'#{options[:directory]}' does not exist")
    end

    @test_run = options[:test]

    ensure_tools_exist!

    FileUtils.mkdir_p(SOURCE_DIR) if !@test_run

    jpeg_images = ImagesHelper.all_jpeg_images_in_dir(options[:directory])

    jpeg_images.each do |input_image|
      if image_needs_color_profile_conversion(image: input_image)
        convert(image: input_image)
      else
        puts "Not converting '#{input_image}', no color profile found or already sRGB"
      end
    end
  end

  private

  def self.image_needs_color_profile_conversion(image:)
    result = TTY::Command.new(printer: :null)
      .run!("magick identify -format \"%[profile:icc]\" \"#{image}\"")

    if result.stdout.strip == 'Adobe RGB (1998)'
      return true
    elsif result.stdout.strip.include?('sRGB')
      return false
    elsif result.stdout.present?
      warn "Unexpected color profile found, '#{result.stdout.strip}'. test if converting to icc sRGB works"
      exit 1
    elsif !result.success?
      warn 'Unexpected failure checking for color profile'
      warn "STDERR: #{result.stderr}" if result.stderr.present?
      exit 1
    else
      return false
    end
  end
  private_class_method :image_needs_color_profile_conversion

  def self.convert(image:)
    output_img = File.basename(image, '.*') + COLORED_SUFFIX + File.extname(image)

    puts "Converting color profile in '#{image}' outputting to '#{output_img}'"

    if File.exist?(output_img)
      puts "Removing existing optimized image: '#{output_img}'"
      FileUtils.rm(output_img)
    end

    return if @test_run

    _result = TTY::Command.new.run("magick convert \"#{image}\" -profile \"#{COLOR_PROFILE_PATH}\" -colorspace sRGB \"#{output_img}\"")

    FileUtils.mv(image, SOURCE_DIR) if File.exist?(output_img)
  end
  private_class_method :convert

  def self.ensure_tools_exist!
    result = TTY::Command.new(printer: :null).run!('which magick')
    if !result.success?
      warn 'Imagemagick installation required. Unable to find in path via "which magick"'
      warn "which exited with code #{result.exit_status}"
      warn "stdout:\n #{result.stdout}" if result.stdout.present?
      warn "stderr:\n #{result.stderr}" if result.stderr.present?
      exit 1
    end

    if !File.exist?(COLOR_PROFILE_PATH)
      warn 'Cannot find necessary color profile to convert to'
      exit 1
    end
  end
  private_class_method :ensure_tools_exist!

end

ConvertJpegColorProfiles.perform(args: ARGV)
