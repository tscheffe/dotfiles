#!/usr/bin/env ruby
# vim: ft=ruby

require 'optimist'
require 'pathname'
require 'fileutils'

require File.join(__dir__, '..', 'ruby', 'lib', 'images_helper')

module SmartSortImages

  def self.perform(args:)
    options = Optimist.options(args) do
      banner <<~BANNERDOC
        Smart sorts images based on filename
         Usage:
          #{File.basename(__FILE__)} [options]
         where [options] are:
      BANNERDOC

      opt :test, 'Run in test mode, reporting which images will be converted without doing it', short: :none
      opt :directory, 'Which directory to parse', short: :none, default: Dir.pwd
    end

    Optimist.die(:directory, "'#{options[:directory]}' does not exist") if !Dir.exist?(options[:directory])

    @test_run = options[:test]

    images = ImagesHelper.all_images_in_dir(options[:directory])

    images.each do |img|
      if !File.exist?(img)
        warn "Something wrong, image #{img} does not exist"
        exit 1
      end

      move_image_to_smart_dir(image: img)
    end
  end

  private

  SCALED_SUFFIX_REGEX = /\A(?<original_name>.+?)(?<sequence>[0-9]{1,4})(?<scaled_suffix>-upscaled.png)\z/

  def self.move_image_to_smart_dir(image:)
    match = image.match(SCALED_SUFFIX_REGEX)
    smart_dir = match[:original_name]
    smart_dir = smart_dir.strip

    puts "Moving img: #{image} to #{smart_dir}"
    if !@test_run
      FileUtils.mkdir_p(smart_dir)
      FileUtils.mv(image, smart_dir)
    end
  end
  private_class_method :move_image_to_smart_dir

end

SmartSortImages.perform(args: ARGV)
