#!/usr/bin/env zsh
# vi: ft=zsh

# Source: http://michaelheap.com/pimp-your-zsh/
# More prompt expansion info at http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html

# Fills the color array so that we can do the '%{fg[red]%}'
autoload -U colors && colors
spectrum # Load spectrum function to enable $FG[010] stuff

# Different char for each version control
function prompt_char {
  local color_one="%{$fg[red]%}"
  local color_two="%{$fg[yellow]%}"
  local color_three="%{$fg[green]%}"
  local char="❯"
  # git branch >/dev/null 2>/dev/null && echo '±' && return
  # hg root >/dev/null 2>/dev/null && echo '☿' && return
  # echo '$'
  echo "$color_one$char$color_two$char$color_three$char"
}

function git_branch {
  # If trimming is needed pipe to: tr -d '[[:space:]]'
  local branch="$(git symbolic-ref --quiet --short HEAD 2>/dev/null)"
  if [[ -n "$branch" ]]; then
    local parens_color="$FG[000]"
    # Default to everything is fine
    local prompt_color="%{$fg[green]%}"

    if [[ "$branch" == 'master' ]]; then
      # Our branch is master, set branch color this way
      if [[ -n $(git status --porcelain 2> /dev/null) ]]; then
        # We have uncommited changes
        prompt_color="%{$fg[red]%}"
      elif [[ -n $(git log origin/$branch.. 2> /dev/null) ]]; then
        # We have changes to push
        prompt_color="%{$fg[blue]%}"
      elif [[ -n $(git log master..origin/master 2> /dev/null) ]]; then
        # We haven't pushed our changes
        prompt_color="%{$fg[blue]%}"
      fi
    else
      # We have an actual branch
      if [[ -n $(git status --porcelain 2> /dev/null) ]]; then
        # We have uncommited changes
        prompt_color="%{$fg[red]%}"
      else
        if [[ -n $(git branch -r | grep "origin/$branch") ]]; then
          # We have pushed our branch, check if we've diverged from origin

          if [[ -n $(git log origin/$branch.. 2> /dev/null) ]]; then
            # We have changes to push
            prompt_color="%{$fg[blue]%}"
          fi
        else
          # We have not pushed, check if we've diverged from master

          if [[ -n $(git log master..$branch 2> /dev/null) ]]; then
            # We've diverged from master
            prompt_color="%{$fg[blue]%}"
          fi
        fi
      fi
    fi

    local left_parens="$parens_color("
    local right_parens="$parens_color)"
    echo "$left_parens$prompt_color$branch$right_parens"
  fi
}

function check_exit_code() {
  local last_exit_code=$1
  if [[ $last_exit_code -ne 0 ]]; then
    local dash="%{$fg[red]%}-%{$reset_color%}"
    local center="%{$fg_bold[red]%}$last_exit_code%{$reset_color%}"
    local exit_code_prompt="$dash$center$dash "

    echo "$exit_code_prompt"
  fi
}

function name() {
  # Only show name if it's different than my usual
  local name=""
  if [[ $(whoami) != "tscheffe" ]]; then
    name="%n%{$reset_color%}"
  fi

  echo "%{$fg[red]%}$name"
}

function comp_name() {
  local color="%{$fg[green]%}"
  # %m is the TCs-MacBook-Pro-4 (which is my localhost name)
  local name="%m"
  echo "$color$name"
}

function path() {
  local color="%{$fg[yellow]%}"
  # %~ expands to the current working directory but if it starts with $HOME
  #   then replace that with a '~'
  local dir="%~"
  local left_bracket="["
  local right_bracket="]"
  echo "$color$left_bracket$dir$right_bracket"
}

function reset_colors() {
  local reset="%{$reset_color%}"
  echo "$reset"
}

function line_number() {
  local color="%{$fg[magenta]%}"
  local ln="%!"
  echo "$color$ln"
}

function precmd() {
  local exit_code=$?
  PROMPT="$(line_number) $(check_exit_code $exit_code)$(name)$(path)$(git_branch) $(prompt_char)$(reset_colors) "
  # RPROMPT="$(git_branch)$(reset_colors)"
}
