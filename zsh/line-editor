#!/usr/bin/env zsh
# vi: ft=zsh

# Function to be executed every time a new line is ready to take input
function zle-line-init {

  # Source: https://www.topbug.net/blog/2016/10/03/restore-the-previously-canceled-command-in-zsh/
  # Store the last non-empty aborted line in MY_LINE_ABORTED
  if [[ -n $ZLE_LINE_ABORTED ]]; then
    local MY_ABORTED_LINE="$ZLE_LINE_ABORTED"
  fi

  # Restore aborted line on the first undo
  if [[ -n $MY_LINE_ABORTED ]]; then
    local savebuf="$BUFFER"
    local savecur="$CURSOR"
    BUFFER="$MY_LINE_ABORTED"
    CURSOR="$#BUFFER"
    zle split-undo
    BUFFER="$savebuf"
    CURSOR="$savecur"
  fi
  # NOTE: If zsh-autosuggestions is used then this code breaks it. Adding
  # '_zsh_autosuggest_widget_clear' here will fix it.
}

zle -N zle-line-init

# -- Keymaps --

# fn-backspace deletes character
bindkey '^[[3~' delete-char
# TODO: Ensure that actual delete key deletes character too

# Missing:
#   alt/option+backspace deletes the entire word
#   alt+arrows moves cursor

# Enable undo and redo
bindkey '^Z' undo
# bindkey '\C-x\C-r' redo # TODO: this doesn't work!
bindkey -e "^X^R" redo

# Allow command line editing in an external editor.
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

# Meta-LeftArrow - backward one word
bindkey "[D" backward-word     # iTerm2
bindkey "^[[1;5D" backward-word # ConEmu
# Meta-RightArray - forward one word
bindkey "[C" forward-word     # iTerm2
bindkey "^[[1;5C" forward-word # ConEmu

# Meta-Backspace - backward delete whole word
# I set iTerm to intercept meta-backspace and send ^H
bindkey "^H" backward-kill-word   # iTerm2
bindkey "\C-_" backward-kill-word # ConEmu

# Ctrl-Delete - forward delete word
bindkey "^[[3;5~" kill-word # ConEmu

# Info:
# http://zsh.sourceforge.net/Guide/zshguide04.html
# http://sgeb.io/posts/2014/04/zsh-zle-custom-widgets/
# http://zshwiki.org/home/zle/bindkeys


# Vi mode:
# https://dougblack.io/words/zsh-vi-mode.html

# From oh-my-zsh

# bindkey '^[[1;5C' forward-word                        # [Ctrl-RightArrow] - move forward one word
# bindkey '^[[1;5D' backward-word                       # [Ctrl-LeftArrow] - move backward one word

# bindkey '^?' backward-delete-char                     # [Backspace] - delete backward
# if [[ "${terminfo[kdch1]}" != "" ]]; then
#   bindkey "${terminfo[kdch1]}" delete-char            # [Delete] - delete forward
# else
#   bindkey "^[[3~" delete-char
#   bindkey "^[3;5~" delete-char
#   bindkey "\e[3~" delete-char
# fi



# Edit the current command line in $EDITOR
# autoload -U edit-command-line
# zle -N edit-command-line
# bindkey '\C-x\C-e' edit-command-line

# From Prezto
# https://github.com/sorin-ionescu/prezto/blob/master/modules/editor/init.zsh

# Use human-friendly identifiers.
# This is cool!
# zmodload zsh/terminfo
# typeset -gA key_info
# key_info=(
#   'Control'   '\C-'
#   'Escape'    '\e'
#   'Meta'      '\M-'
#   'Backspace' "^?"
#   'Delete'    "^[[3~"
#   'F1'        "$terminfo[kf1]"
#   'F2'        "$terminfo[kf2]"
#   'F3'        "$terminfo[kf3]"
#   'F4'        "$terminfo[kf4]"
#   'F5'        "$terminfo[kf5]"
#   'F6'        "$terminfo[kf6]"
#   'F7'        "$terminfo[kf7]"
#   'F8'        "$terminfo[kf8]"
#   'F9'        "$terminfo[kf9]"
#   'F10'       "$terminfo[kf10]"
#   'F11'       "$terminfo[kf11]"
#   'F12'       "$terminfo[kf12]"
#   'Insert'    "$terminfo[kich1]"
#   'Home'      "$terminfo[khome]"
#   'PageUp'    "$terminfo[kpp]"
#   'End'       "$terminfo[kend]"
#   'PageDown'  "$terminfo[knp]"
#   'Up'        "$terminfo[kcuu1]"
#   'Left'      "$terminfo[kcub1]"
#   'Down'      "$terminfo[kcud1]"
#   'Right'     "$terminfo[kcuf1]"
#   'BackTab'   "$terminfo[kcbt]"
# )
