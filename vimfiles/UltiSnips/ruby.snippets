priority 0

# Snippet Options:
# s - Remove whitespace immediately before the cursor at the end of a line before
#     jumping to the next tabstop. This causes identation on the $0 tapstop to disappear.
# m - Trim all whitespaces from the right side of snippet lines.


# Helpers
global !p
import string, os

# Partially from:
#		http://inflection.readthedocs.org/en/latest/_modules/inflection.html#camelize
def camelize(underscore_word, include_modules=False):
		"""
		Convert strings to CamelCase.

		Examples::

				>>> camelize("device_type")
				"DeviceType"
				>>> camelize("directory/device_type")
				"DeviceType"
				>>> camelize("directory/device_type", True)
				"Directory::DeviceType"

		:param include_modules: if set to `True` :func:`camelize` detects modules
				in the path and includes them in the path. If set to `False` :func:`camelize`
				uses the "basename" from the supplied path. Defaults to `False`.
		"""
		if include_modules:
			words = underscore_word.split('/')
			return map(lambda w: camelize(w), words)
		else:
			underscore_word = os.path.basename(underscore_word)
			return re.sub(r"(?:^|_)(.)", lambda m: m.group(1).upper(), underscore_word)
endglobal


# -- File Templates

# TODO: For whatever reason, starting 'class_to_test' with a 'c' will put a
#	 quote in the camelized version
snippet spec "spec file template" m
require 'spec_helper'

require '${1:class_to_test}'

describe `!p snip.rv = camelize(t[1])` do
	$0
end
endsnippet

# TODO: Get the `interactor_name` camelizing the file name automatically
snippet /int(eractor)?/ "Interactor Module" m
require

module Devtools::${1:parent_module}
	module ${2:interactor_name}
		def self.perform
			$0
		end

	end
end

endsnippet


snippet specc "spec file template" sm
require 'spec_helper'

require 'controllers/${1:controller_to_test}'

describe `!p snip.rv = camelize(t[1])`, :controller do
	$0
end
endsnippet

# Templates to write:
# - Generate an interactor/spec/model given the file name and location


# -- Snippets

snippet req "require 'something'" sm
require '${1:something}'$0
endsnippet

snippet reqi "require 'interactors/'" sm
require 'interactors/${1:interactor}'$0
endsnippet

snippet reqm "require 'models/'" sm
require 'models/${1:model}'$0
endsnippet

snippet /desc(ribe)?/ "describe 'something'" smr
describe '${1:method}' do
	$2
end$0
endsnippet

snippet /cont(ext)?/ "context 'something'" smr
context '${1:when/where}' do
	$2
end$0
endsnippet

snippet let "let(:something) { }" sm
let(:${1:something}) { ${2:value} }$0
endsnippet

snippet fkey "key: @object.fetch('value')" sm
${1:key}: @object.fetch('$1')$0
endsnippet

snippet error "error do" sm
set :raise_errors, false
error do
	e = env['sinatra.error']

	require 'pry'; binding.pry
end
$0
endsnippet


# -- Interactor Snippets

snippet "def self." "def self.foo do; end; private_class_method :foo" sm
def self.${1:method_name}
  $0
end
private_class_method :$1
endsnippet


# -- Devtools Snippets

# Dry RB Struct types snippet
snippet attribute "attribute Name, Type" sm
attribute :${1:attribute_name}, Devtools::StructTypes::Strict::${2:String}$0
endsnippet


# -- Spec Snippets
snippet subj "subject(:perform) { }" sm
subject(:${1:perform}) { ${2:do_it} }$0
endsnippet

snippet local_gem "Local trunkclub-gem" sm
gem 'trunkclub', path: '../trunkclub-gem'$0
endsnippet

snippet before "before :each do" m
before :each do
	$0
end
endsnippet

snippet it "it '...' do" m
it '${1:does something}' do
	$0
end
endsnippet


# -- Model Snippets
snippet validates "validates :attribute" sm
validates :${1:attribute}$0
endsnippet

snippet validatesp "validates :attribute, presence: true" sm
validates :${1:attribute}, presence: true$0
endsnippet

# -- Bin Script Snippets

snippet bin "Set up bin script file other way" bsm
#!/usr/bin/env ruby
# vim: ft=ruby

require 'pathname'
require 'fileutils'

require File.join(__dir__, '..', 'ruby', 'lib', '${1:optimist_helper}')

module ${2:`!p snip.rv = camelize(snip.basename)`}
  def self.perform(args:)
    $0
  end
end

$2.perform(args: ARGV)
endsnippet

snippet bintwo "Set up bin script file" b
#!/usr/bin/env ruby
# vim: ft=ruby

require 'pathname'
require 'fileutils'

require File.join(__dir__, '..', 'ruby', 'lib', 'optimist_helper')
module `!p snip.rv = camelize(snip.basename); cache = { "camelized_filename": snip.rv}`
  def self.perform(args:)
    $0
  end
end

`!p snip.rv = cache["camelized_filename"]`.perform(args: ARGV)
endsnippet

# vim: ts=2 sw=2 expandtab ft=snippets:
